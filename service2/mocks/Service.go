// Code generated by mockery v2.13.1. DO NOT EDIT.

package mocks

import (
	domain "taobin-service/internal/core/domain"

	mock "github.com/stretchr/testify/mock"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// GetStock provides a mock function with given fields: payload
func (_m *Service) GetStock(payload domain.QueryStockRequest) (*domain.StockListResult, error) {
	ret := _m.Called(payload)

	var r0 *domain.StockListResult
	if rf, ok := ret.Get(0).(func(domain.QueryStockRequest) *domain.StockListResult); ok {
		r0 = rf(payload)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.StockListResult)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(domain.QueryStockRequest) error); ok {
		r1 = rf(payload)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateStock provides a mock function with given fields: payload
func (_m *Service) UpdateStock(payload domain.StockRequest) (*domain.StockResponse, error) {
	ret := _m.Called(payload)

	var r0 *domain.StockResponse
	if rf, ok := ret.Get(0).(func(domain.StockRequest) *domain.StockResponse); ok {
		r0 = rf(payload)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.StockResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(domain.StockRequest) error); ok {
		r1 = rf(payload)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewService interface {
	mock.TestingT
	Cleanup(func())
}

// NewService creates a new instance of Service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewService(t mockConstructorTestingTNewService) *Service {
	mock := &Service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
